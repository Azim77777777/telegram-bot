import logging
import sqlite3
import asyncio
import random
from aiogram import Bot, Dispatcher, executor, types

# üîë –í—Å—Ç–∞–≤—å —Å—é–¥–∞ —Ç–æ–∫–µ–Ω –æ—Ç BotFather
API_TOKEN = "YOUR_TOKEN_HERE"

# üîß –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# üìÇ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect("gamebot.db")
cur = conn.cursor()

cur.execute("""CREATE TABLE IF NOT EXISTS users (
    user_id INTEGER PRIMARY KEY,
    balance INTEGER DEFAULT 1000000,
    factories TEXT DEFAULT '',
    hidden INTEGER DEFAULT 0,
    ref_id INTEGER DEFAULT NULL
)""")

cur.execute("""CREATE TABLE IF NOT EXISTS promo (
    code TEXT PRIMARY KEY,
    amount INTEGER,
    activations INTEGER
)""")
conn.commit()

# ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

# üëë –ê–¥–º–∏–Ω ID
ADMIN_ID = 7167501974  # –∑–∞–º–µ–Ω–∏ –Ω–∞ —Å–≤–æ–π –∞–π–¥–∏

# üìå –•–µ–ª–ø–µ—Ä—ã
def get_user(user_id):
    cur.execute("SELECT * FROM users WHERE user_id = ?", (user_id,))
    return cur.fetchone()
    
    # üìå –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è
@dp.message_handler(commands=["ss"])
async def register(message: types.Message):
    if not get_user(message.from_user.id):
        cur.execute("INSERT INTO users (user_id) VALUES (?)", (message.from_user.id,))
        conn.commit()
        await message.answer("‚úÖ –í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!\nüí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: 1,000,000")
    else:
        await message.answer("–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!")

# üìå –ü—Ä–æ—Ñ–∏–ª—å
@dp.message_handler(commands=["meb", "—è"])
async def profile(message: types.Message):
    user = get_user(message.from_user.id)
    if user:
        await message.answer(
            f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å\n\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1]:,}\nüè≠ –ó–∞–≤–æ–¥—ã: {user[2] or '–Ω–µ—Ç'}"
        )
    else:
        await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")

# üìå –ë–æ–Ω—É—Å
@dp.message_handler(commands=["–±–æ–Ω—É—Å", "bonus"])
async def bonus(message: types.Message):
    user = get_user(message.from_user.id)
    if not user:
        return await message.answer("–°–Ω–∞—á–∞–ª–∞ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å: /ss")
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (100000, message.from_user.id))
    conn.commit()
    await message.answer("üéÅ –í—ã –ø–æ–ª—É—á–∏–ª–∏ –±–æ–Ω—É—Å: 100,000")

# üìå –ü—Ä–æ–º–æ–∫–æ–¥—ã
@dp.message_handler(commands=["new_promo"])
async def new_promo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, code, amount, act = message.text.split()
        cur.execute("INSERT INTO promo VALUES (?, ?, ?)", (code, int(amount), int(act)))
        conn.commit()
        await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω –Ω–∞ {amount}‚ÇΩ ({act} –∞–∫—Ç–∏–≤–∞—Ü–∏–π)")
    except:
        await message.answer("–§–æ—Ä–º–∞—Ç: /new_promo –Ω–∞–∑–≤–∞–Ω–∏–µ —Å—É–º–º–∞ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏")

@dp.message_handler(commands=["pr"])
async def activate_promo(message: types.Message):
    try:
        _, code = message.text.split()
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /pr –∫–æ–¥")
    cur.execute("SELECT * FROM promo WHERE code = ?", (code,))
    promo = cur.fetchone()
    if not promo:
        return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω")
    if promo[2] <= 0:
        return await message.answer("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è")
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (promo[1], message.from_user.id))
    cur.execute("UPDATE promo SET activations = activations - 1 WHERE code = ?", (code,))
    conn.commit()
    await message.answer(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promo[1]}")

# üìå –ü–µ—Ä–µ–≤–æ–¥
@dp.message_handler(commands=["–ø–µ—Ä–µ–≤–µ—Å—Ç–∏"])
async def transfer(message: types.Message):
    try:
        _, amount, uid = message.text.split()
        amount, uid = int(amount), int(uid)
    except:
        return await message.answer("–§–æ—Ä–º–∞—Ç: /–ø–µ—Ä–µ–≤–µ—Å—Ç–∏ —Å—É–º–º–∞ –∞–π–¥–∏")
    user = get_user(message.from_user.id)
    if user[1] < amount:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (amount, message.from_user.id))
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, uid))
    conn.commit()
    await message.answer(f"‚úÖ –ü–µ—Ä–µ–≤–æ–¥ {amount} –∏–≥—Ä–æ–∫—É {uid} –≤—ã–ø–æ–ª–Ω–µ–Ω")
    
    # üìå –ó–∞–≤–æ–¥—ã
factories_list = {
    "small": 1_000_000,
    "medium": 10_000_000,
    "big": 100_000_000
}

@dp.message_handler(commands=["buy_factory"])
async def buy_factory(message: types.Message):
    try:
        _, name = message.text.split()
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /buy_factory small|medium|big")
    if name not in factories_list:
        return await message.answer("–¢–∞–∫–æ–≥–æ –∑–∞–≤–æ–¥–∞ –Ω–µ—Ç")
    price = factories_list[name]
    user = get_user(message.from_user.id)
    if user[1] < price:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–µ–Ω–µ–≥ –¥–ª—è –ø–æ–∫—É–ø–∫–∏")
    cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (price, message.from_user.id))
    new_factories = (user[2] + "," + name) if user[2] else name
    cur.execute("UPDATE users SET factories = ? WHERE user_id = ?", (new_factories, message.from_user.id))
    conn.commit()
    await message.answer(f"üè≠ –ó–∞–≤–æ–¥ {name} –∫—É–ø–ª–µ–Ω –∑–∞ {price:,}")

# üìå –ù–∞—á–∏—Å–ª–µ–Ω–∏–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç –∑–∞–≤–æ–¥–æ–≤ (2%/—á–∞—Å)
async def factory_income():
    while True:
        await asyncio.sleep(3600)
        cur.execute("SELECT * FROM users")
        users = cur.fetchall()
        for u in users:
            if not u[2]:
                continue
            factories = u[2].split(",")
            income = 0
            for f in factories:
                if f in factories_list:
                    income += int(factories_list[f] * 0.02)
            cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (income, u[0]))
        conn.commit()

# üìå –ê–¥–º–∏–Ω: –≤—ã–¥–∞—Ç—å/–∑–∞–±—Ä–∞—Ç—å –¥–µ–Ω—å–≥–∏
@dp.message_handler(commands=["admin_money"])
async def admin_money(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        _, uid, amount = message.text.split()
        uid, amount = int(uid), int(amount)
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /admin_money user_id —Å—É–º–º–∞(+/-)")
    cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (amount, uid))
    conn.commit()
    await message.answer(f"‚úÖ –ë–∞–ª–∞–Ω—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {uid} –∏–∑–º–µ–Ω—ë–Ω –Ω–∞ {amount}")

# üìå –¢–æ–ø –∏–≥—Ä–æ–∫–æ–≤
@dp.message_handler(commands=["—Ç–æ–ø", "top"])
async def top_players(message: types.Message):
    cur.execute("SELECT user_id, balance FROM users WHERE hidden=0 ORDER BY balance DESC LIMIT 10")
    top = cur.fetchall()
    text = "üèÜ –¢–û–ü –∏–≥—Ä–æ–∫–æ–≤:\n\n"
    for idx, (user_id, balance) in enumerate(top, start=1):
        text += f"{idx}. –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} ‚Äî {balance:,}‚ÇΩ\n"
    await message.answer(text)
    
    # üìå –†—É–ª–µ—Ç–∫–∞
@dp.message_handler(commands=["—Ä—É–ª"])
async def roulette(message: types.Message):
    try:
        _, bet, choice = message.text.split()
        bet = int(bet)
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /—Ä—É–ª —Å—Ç–∞–≤–∫–∞ —á–µ—Ç|–Ω–µ—á–µ—Ç|–∫—Ä–∞—Å–Ω–æ–µ|—á–µ—Ä–Ω–æ–µ|—á–∏—Å–ª–æ")
    user = get_user(message.from_user.id)
    if user[1] < bet:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤ –¥–ª—è —Å—Ç–∞–≤–∫–∏")

    number = random.randint(0, 36)
    color = "–∫—Ä–∞—Å–Ω–æ–µ" if number % 2 == 0 else "—á–µ—Ä–Ω–æ–µ"
    parity = "—á–µ—Ç" if number % 2 == 0 else "–Ω–µ—á–µ—Ç"
    win = False
    coef = 2

    if choice.isdigit() and int(choice) == number:
        win, coef = True, 35
    elif choice in [color, parity]:
        win = True

    if win:
        prize = bet * coef
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, message.from_user.id))
        conn.commit()
        await message.answer(f"üé∞ –í—ã–ø–∞–ª–æ: {number} ({color}, {parity})\n‚úÖ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {prize:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] + prize - bet:,}")
    else:
        cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, message.from_user.id))
        conn.commit()
        await message.answer(f"üé∞ –í—ã–ø–∞–ª–æ: {number} ({color}, {parity})\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] - bet:,}")

# üìå –ú–∏–Ω–∏-–∏–≥—Ä–∞
@dp.message_handler(commands=["–º–∏–Ω–∏"])
async def mini(message: types.Message):
    try:
        _, bet = message.text.split()
        bet = int(bet)
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–º–∏–Ω–∏ —Å—Ç–∞–≤–∫–∞")
    user = get_user(message.from_user.id)
    if user[1] < bet:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    if random.random() > 0.5:
        prize = bet * 2
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, message.from_user.id))
        conn.commit()
        await message.answer(f"üé≤ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {prize:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] + prize - bet:,}")
    else:
        cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, message.from_user.id))
        conn.commit()
        await message.answer(f"üé≤ –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] - bet:,}")

# üìå –ë–∞—à–Ω—è
@dp.message_handler(commands=["–±–∞—à–Ω—è"])
async def tower(message: types.Message):
    try:
        _, bet, floors = message.text.split()
        bet, floors = int(bet), int(floors)
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–±–∞—à–Ω—è —Å—Ç–∞–≤–∫–∞ —ç—Ç–∞–∂–∏")
    user = get_user(message.from_user.id)
    if user[1] < bet:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    coef = 1 + (floors * 0.2)
    if random.random() > 0.5:
        prize = int(bet * coef)
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, message.from_user.id))
        conn.commit()
        await message.answer(f"üè∞ –ü–æ–±–µ–¥–∞! –≠—Ç–∞–∂–µ–π: {floors}, –í—ã–∏–≥—Ä—ã—à: {prize:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] + prize - bet:,}")
    else:
        cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, message.from_user.id))
        conn.commit()
        await message.answer(f"üè∞ –ë–∞—à–Ω—è —Ä—É—Ö–Ω—É–ª–∞!\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] - bet:,}")

# üìå –ö—Ä–∞—à
@dp.message_handler(commands=["–∫—Ä–∞—à"])
async def crash(message: types.Message):
    try:
        _, bet, coef = message.text.split()
        bet, coef = int(bet), float(coef)
    except:
        return await message.answer("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /–∫—Ä–∞—à —Å—Ç–∞–≤–∫–∞ –∫–æ—ç—Ñ")
    user = get_user(message.from_user.id)
    if user[1] < bet:
        return await message.answer("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤")
    crash_coef = round(random.uniform(1, 5), 2)
    if crash_coef >= coef:
        prize = int(bet * coef)
        cur.execute("UPDATE users SET balance = balance + ? WHERE user_id = ?", (prize, message.from_user.id))
        conn.commit()
        await message.answer(f"üí• –ö—Ä–∞—à –¥–æ—Å—Ç–∏–≥ {crash_coef}x\n‚úÖ –ü–æ–±–µ–¥–∞! –í—ã–∏–≥—Ä—ã—à: {prize:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] + prize - bet:,}")
    else:
        cur.execute("UPDATE users SET balance = balance - ? WHERE user_id = ?", (bet, message.from_user.id))
        conn.commit()
        await message.answer(f"üí• –ö—Ä–∞—à –æ—Å—Ç–∞–Ω–æ–≤–∏–ª—Å—è –Ω–∞ {crash_coef}x\n‚ùå –ü—Ä–æ–∏–≥—Ä—ã—à: {bet:,}\nüí∞ –ë–∞–ª–∞–Ω—Å: {user[1] - bet:,}")
        
        # üìå –°—Ç–∞—Ä—Ç–µ—Ä
if __name__ == "__main__":
    loop = asyncio.get_event_loop()
    loop.create_task(factory_income())
    executor.start_polling(dp, skip_updates=True)
    
    
    
