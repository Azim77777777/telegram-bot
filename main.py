from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
import random, json, time, os

TOKEN = "–í–ê–®_–¢–û–ö–ï–ù_–ë–û–¢–ê"
ADMIN_ID = 123456789  # –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Å–≤–æ–π Telegram ID

bot = Bot(token=TOKEN)
dp = Dispatcher(bot)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
if os.path.exists("users.json"):
    with open("users.json", "r") as f:
        users = json.load(f)
else:
    users = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤
if os.path.exists("promos.json"):
    with open("promos.json", "r") as f:
        promos = json.load(f)
else:
    promos = {}

def save_users():
    with open("users.json", "w") as f:
        json.dump(users, f)

def save_promos():
    with open("promos.json", "w") as f:
        json.dump(promos, f)

# ======== Start ========
@dp.message_handler(commands=["start"])
async def start(message: types.Message):
    user_id = str(message.from_user.id)
    if user_id not in users:
        users[user_id] = {"balance": 1000, "last_hour": 0}
        save_users()
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    buttons = ["–°–∞–ø—ë—Ä", "–ö—Ä–∞—à", "–ë–∞—à–Ω—è", "–†—É–ª–µ—Ç–∫–∞", "–ü—Ä–æ–º–æ", "–ë–∞–ª–∞–Ω—Å", "–ß–∞—Å–æ–≤–æ–π –±–æ–Ω—É—Å"]
    keyboard.add(*buttons)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –í—ã–±–µ—Ä–∏ –∏–≥—Ä—É –∏–ª–∏ –∫–æ–º–∞–Ω–¥—É:", reply_markup=keyboard)

# ======== –ë–∞–ª–∞–Ω—Å ========
@dp.message_handler(lambda message: message.text.lower() == "–±–∞–ª–∞–Ω—Å")
async def balance(message: types.Message):
    user_id = str(message.from_user.id)
    bal = users.get(user_id, {"balance":0})["balance"]
    await message.reply(f"üí∞ –í–∞—à –±–∞–ª–∞–Ω—Å: {bal} mCoin")

# ======== –ß–∞—Å–æ–≤–æ–π –±–æ–Ω—É—Å ========
@dp.message_handler(lambda message: message.text.lower() == "—á–∞—Å–æ–≤–æ–π –±–æ–Ω—É—Å")
async def hour_bonus(message: types.Message):
    user_id = str(message.from_user.id)
    now = time.time()
    last = users[user_id].get("last_hour", 0)
    if now - last >= 3600:
        bonus = random.randint(100, 200)
        users[user_id]["balance"] += bonus
        users[user_id]["last_hour"] = now
        save_users()
        await message.reply(f"‚è∞ –í—ã –ø–æ–ª—É—á–∏–ª–∏ {bonus} mCoin –≤ –∫–∞—á–µ—Å—Ç–≤–µ —á–∞—Å–æ–≤–æ–≥–æ –±–æ–Ω—É—Å–∞!")
    else:
        await message.reply("‚è≥ –ë–æ–Ω—É—Å –º–æ–∂–Ω–æ –±—Ä–∞—Ç—å —Ä–∞–∑ –≤ —á–∞—Å!")

# ======== –ü—Ä–æ–º–æ–∫–æ–¥ ========
@dp.message_handler(lambda message: message.text.lower() == "–ø—Ä–æ–º–æ")
async def promo(message: types.Message):
    await message.reply("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –ø—Ä–æ–º–æ–∫–æ–¥:")
    @dp.message_handler()
    async def apply_promo(msg: types.Message):
        code = msg.text.strip().upper()
        user_id = str(msg.from_user.id)
        if code in promos:
            users[user_id]["balance"] += promos[code]
            save_users()
            await msg.reply(f"üéâ –ü—Ä–æ–º–æ–∫–æ–¥ –ø—Ä–∏–º–µ–Ω—ë–Ω! –ü–æ–ª—É—á–µ–Ω–æ {promos[code]} mCoin.")
            del promos[code]
            save_promos()
        else:
            await msg.reply("‚ùå –ü—Ä–æ–º–æ–∫–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω.")

# ======== –°–∞–ø—ë—Ä (–ú–∏–Ω–∏) ========
@dp.message_handler(lambda message: message.text.lower() == "—Å–∞–ø—ë—Ä")
async def saper(message: types.Message):
    user_id = str(message.from_user.id)
    bet = 100
    if users[user_id]["balance"] < bet:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    users[user_id]["balance"] -= bet
    total_cells = 5
    mines_count = 2
    mine_positions = random.sample(range(1, total_cells+1), mines_count)
    safe_cell = random.choice([i for i in range(1, total_cells+1) if i not in mine_positions])
    users[user_id]["balance"] += bet*2  # –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–∏–º–µ—Ä
    save_users()
    await message.reply(f"‚úÖ –í—ã –æ—Ç–∫—Ä—ã–ª–∏ –±–µ–∑–æ–ø–∞—Å–Ω—É—é –∫–ª–µ—Ç–∫—É! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet*2} mCoin.")

# ======== –ö—Ä–∞—à ========
@dp.message_handler(lambda message: message.text.lower() == "–∫—Ä–∞—à")
async def crash(message: types.Message):
    user_id = str(message.from_user.id)
    bet = 100
    if users[user_id]["balance"] < bet:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    users[user_id]["balance"] -= bet
    multiplier = round(random.uniform(1.1, 5.0), 2)
    win = int(bet * multiplier)
    users[user_id]["balance"] += win
    save_users()
    await message.reply(f"üìà –ö—Ä–∞—à –∑–∞–≤–µ—Ä—à–µ–Ω! –ú–Ω–æ–∂–∏—Ç–µ–ª—å: {multiplier}x\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} mCoin!")

# ======== –†—É–ª–µ—Ç–∫–∞ ========
@dp.message_handler(lambda message: message.text.lower() == "—Ä—É–ª–µ—Ç–∫–∞")
async def roulette(message: types.Message):
    user_id = str(message.from_user.id)
    bet = 100
    if users[user_id]["balance"] < bet:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    users[user_id]["balance"] -= bet
    color = random.choice(["–ö—Ä–∞—Å–Ω—ã–π", "–ß—ë—Ä–Ω—ã–π"])
    users[user_id]["balance"] += bet*2
    save_users()
    await message.reply(f"üé∞ –í—ã–ø–∞–ª–æ {color}! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {bet*2} mCoin!")

# ======== –ë–∞—à–Ω—è ========
@dp.message_handler(lambda message: message.text.lower() == "–±–∞—à–Ω—è")
async def tower(message: types.Message):
    user_id = str(message.from_user.id)
    bet = 100
    if users[user_id]["balance"] < bet:
        await message.reply("‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!")
        return
    users[user_id]["balance"] -= bet
    levels = random.randint(1,5)
    win = bet * levels
    users[user_id]["balance"] += win
    save_users()
    await message.reply(f"üè∞ –í—ã –ø–æ–¥–Ω—è–ª–∏—Å—å –Ω–∞ {levels} —É—Ä–æ–≤–Ω–µ–π –±–∞—à–Ω–∏!\n–í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ {win} mCoin!")

# ======== –ê–¥–º–∏–Ω: –≤—ã–¥–∞—á–∞ –¥–µ–Ω–µ–≥ ========
@dp.message_handler(commands=["give"])
async def give(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        args = message.text.split()
        user_id = args[1]
        amount = int(args[2])
        if user_id in users:
            users[user_id]["balance"] += amount
            save_users()
            await message.reply(f"‚úÖ –í—ã–¥–∞–Ω–æ {amount} mCoin –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
        else:
            await message.reply("‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    except:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /give USER_ID AMOUNT")

# ======== –ê–¥–º–∏–Ω: —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–æ–∫–æ–¥–æ–≤ ========
@dp.message_handler(commands=["createpromo"])
async def createpromo(message: types.Message):
    if message.from_user.id != ADMIN_ID:
        return
    try:
        args = message.text.split()
        code = args[1].upper()
        amount = int(args[2])
        promos[code] = amount
        save_promos()
        await message.reply(f"‚úÖ –ü—Ä–æ–º–æ–∫–æ–¥ {code} —Å–æ–∑–¥–∞–Ω –Ω–∞ {amount} mCoin")
    except:
        await message.reply("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /createpromo CODE AMOUNT")

if __name__ == "__main__":
    executor.start_polling(dp, skip_updates=True)
